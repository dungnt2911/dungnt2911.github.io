[{"content":"Giới thiệu Arrow function là một trong những tính năng quan trọng nhất của ES6 (ECMAScript 2015). Nó cung cấp cú pháp ngắn gọn hơn để viết hàm trong JavaScript.\nES6 đã thêm nhiều tính năng mới: let, const, template literals, destructuring, và đặc biệt là arrow functions.\nArrow function không chỉ giúp code ngắn gọn mà còn có cách xử lý this khác biệt so với function thường.\nCú pháp cơ bản Function thường vs Arrow Function // Function thường function add(a, b) { return a + b; } // Arrow function - cú pháp đầy đủ const add = (a, b) =\u0026gt; { return a + b; }; // Arrow function - cú pháp ngắn gọn (implicit return) const add = (a, b) =\u0026gt; a + b; console.log(add(5, 3)); // Output: 8 Một tham số Khi chỉ có một tham số, có thể bỏ dấu ngoặc:\n// Không cần dấu ngoặc const square = x =\u0026gt; x * x; console.log(square(4)); // Output: 16 console.log(square(7)); // Output: 49 Không có tham số Khi không có tham số, cần dấu ngoặc rỗng:\nconst greet = () =\u0026gt; console.log(\u0026#34;Xin chào!\u0026#34;); greet(); // Output: Xin chào! const getRandomNumber = () =\u0026gt; Math.random(); console.log(getRandomNumber()); // Output: số ngẫu nhiên Sự khác biệt về this Đây là điểm quan trọng nhất khi sử dụng arrow function!\nFunction thường const person = { name: \u0026#39;Dũng\u0026#39;, age: 25, sayHi: function() { console.log(\u0026#39;Xin chào, tôi là \u0026#39; + this.name); console.log(\u0026#39;Năm nay tôi \u0026#39; + this.age + \u0026#39; tuổi\u0026#39;); } }; person.sayHi(); // Output: // Xin chào, tôi là Dũng // Năm nay tôi 25 tuổi Arrow function kế thừa this const person = { name: \u0026#39;Dũng\u0026#39;, friends: [\u0026#39;An\u0026#39;, \u0026#39;Bình\u0026#39;, \u0026#39;Chi\u0026#39;], showFriends: function() { this.friends.forEach(friend =\u0026gt; { // Arrow function kế thừa this từ showFriends console.log(this.name + \u0026#39; là bạn với \u0026#39; + friend); }); } }; person.showFriends(); // Output: // Dũng là bạn với An // Dũng là bạn với Bình // Dũng là bạn với Chi So sánh với function thường const person = { name: \u0026#39;Dũng\u0026#39;, friends: [\u0026#39;An\u0026#39;, \u0026#39;Bình\u0026#39;], showFriendsWrong: function() { this.friends.forEach(function(friend) { // this ở đây KHÔNG trỏ đến person! console.log(this.name + \u0026#39; là bạn với \u0026#39; + friend); }); } }; person.showFriendsWrong(); // Output: undefined là bạn với An // undefined là bạn với Bình Sử dụng với Array Methods Arrow function rất hữu ích với các phương thức của Array.\nMap - Biến đổi mảng const numbers = [1, 2, 3, 4, 5]; // Cách cũ const doubled = numbers.map(function(n) { return n * 2; }); // Arrow function - ngắn gọn hơn const doubled = numbers.map(n =\u0026gt; n * 2); console.log(doubled); // [2, 4, 6, 8, 10] // Ví dụ phức tạp hơn const users = [ { name: \u0026#39;An\u0026#39;, age: 25 }, { name: \u0026#39;Bình\u0026#39;, age: 30 } ]; const names = users.map(user =\u0026gt; user.name); console.log(names); // [\u0026#39;An\u0026#39;, \u0026#39;Bình\u0026#39;] Filter - Lọc mảng const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Lọc số chẵn const evenNumbers = numbers.filter(n =\u0026gt; n % 2 === 0); console.log(evenNumbers); // [2, 4, 6, 8, 10] // Lọc số lớn hơn 5 const bigNumbers = numbers.filter(n =\u0026gt; n \u0026gt; 5); console.log(bigNumbers); // [6, 7, 8, 9, 10] // Ví dụ thực tế const products = [ { name: \u0026#39;Laptop\u0026#39;, price: 20000000 }, { name: \u0026#39;Mouse\u0026#39;, price: 200000 }, { name: \u0026#39;Keyboard\u0026#39;, price: 500000 } ]; const expensiveProducts = products.filter(p =\u0026gt; p.price \u0026gt; 1000000); console.log(expensiveProducts); // [{ name: \u0026#39;Laptop\u0026#39;, price: 20000000 }] Reduce - Tính toán tổng hợp const numbers = [1, 2, 3, 4, 5]; // Tính tổng const sum = numbers.reduce((total, n) =\u0026gt; total + n, 0); console.log(sum); // 15 // Tìm số lớn nhất const max = numbers.reduce((max, n) =\u0026gt; n \u0026gt; max ? n : max); console.log(max); // 5 // Đếm số lần xuất hiện const fruits = [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;]; const count = fruits.reduce((acc, fruit) =\u0026gt; { acc[fruit] = (acc[fruit] || 0) + 1; return acc; }, {}); console.log(count); // { apple: 3, banana: 2, orange: 1 } Khi nào nên dùng? ✅ Nên dùng Arrow Function 1. Callback functions\n// Event listeners button.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { console.log(\u0026#39;Button clicked!\u0026#39;); }); // setTimeout/setInterval setTimeout(() =\u0026gt; console.log(\u0026#39;Hello after 1s\u0026#39;), 1000); // Array methods const doubled = [1, 2, 3].map(x =\u0026gt; x * 2); 2. Promises và Async/Await\n// Promises fetch(\u0026#39;/api/users\u0026#39;) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; console.log(data)) .catch(error =\u0026gt; console.error(error)); // Async/await const getUsers = async () =\u0026gt; { try { const response = await fetch(\u0026#39;/api/users\u0026#39;); const data = await response.json(); return data; } catch (error) { console.error(error); } }; 3. Khi cần kế thừa this từ bên ngoài\nclass Timer { constructor() { this.seconds = 0; // Arrow function kế thừa this từ constructor setInterval(() =\u0026gt; { this.seconds++; console.log(this.seconds); }, 1000); } } const timer = new Timer(); // 1, 2, 3, 4, ... ❌ Không nên dùng Arrow Function 1. Methods trong object (khi cần this riêng)\n// ❌ Sai - this không trỏ đến person const person = { name: \u0026#39;Dũng\u0026#39;, sayHi: () =\u0026gt; { console.log(\u0026#39;Xin chào, \u0026#39; + this.name); // undefined } }; // ✅ Đúng - dùng function thường const person = { name: \u0026#39;Dũng\u0026#39;, sayHi: function() { console.log(\u0026#39;Xin chào, \u0026#39; + this.name); // Dũng } }; // ✅ Hoặc dùng method shorthand (ES6) const person = { name: \u0026#39;Dũng\u0026#39;, sayHi() { console.log(\u0026#39;Xin chào, \u0026#39; + this.name); // Dũng } }; 2. Event handlers khi cần this là element\n// ❌ Sai button.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { this.classList.add(\u0026#39;active\u0026#39;); // this không phải button }); // ✅ Đúng button.addEventListener(\u0026#39;click\u0026#39;, function() { this.classList.add(\u0026#39;active\u0026#39;); // this là button }); 3. Constructors\n// ❌ Sai - không thể dùng arrow function làm constructor const Person = (name) =\u0026gt; { this.name = name; }; const person = new Person(\u0026#39;Dũng\u0026#39;); // Error! // ✅ Đúng - dùng function thường hoặc class function Person(name) { this.name = name; } // Hoặc class Person { constructor(name) { this.name = name; } } So sánh tổng hợp Tính năng Function thường Arrow Function Cú pháp function() {} () =\u0026gt; {} this Dynamic (tùy cách gọi) Lexical (kế thừa) arguments Có object arguments Không có Constructor Có thể dùng new Không thể Implicit return Không Có (khi 1 dòng) Hoisting Có Không (với const/let) Ví dụ thực tế 1. Xử lý danh sách sản phẩm const products = [ { id: 1, name: \u0026#39;Laptop\u0026#39;, price: 20000000, inStock: true }, { id: 2, name: \u0026#39;Mouse\u0026#39;, price: 200000, inStock: false }, { id: 3, name: \u0026#39;Keyboard\u0026#39;, price: 500000, inStock: true }, { id: 4, name: \u0026#39;Monitor\u0026#39;, price: 5000000, inStock: true } ]; // Lấy tên tất cả sản phẩm const productNames = products.map(p =\u0026gt; p.name); console.log(productNames); // [\u0026#39;Laptop\u0026#39;, \u0026#39;Mouse\u0026#39;, \u0026#39;Keyboard\u0026#39;, \u0026#39;Monitor\u0026#39;] // Lọc sản phẩm còn hàng const availableProducts = products.filter(p =\u0026gt; p.inStock); console.log(availableProducts); // [Laptop, Keyboard, Monitor] // Tính tổng giá trị hàng tồn kho const totalValue = products .filter(p =\u0026gt; p.inStock) .reduce((sum, p) =\u0026gt; sum + p.price, 0); console.log(totalValue); // 25500000 // Tìm sản phẩm đắt nhất const mostExpensive = products .reduce((max, p) =\u0026gt; p.price \u0026gt; max.price ? p : max); console.log(mostExpensive.name); // Laptop 2. Xử lý API với Async/Await // Fetch user data và posts const getUserWithPosts = async (userId) =\u0026gt; { try { // Lấy thông tin user const userResponse = await fetch(`/api/users/${userId}`); const user = await userResponse.json(); // Lấy posts của user const postsResponse = await fetch(`/api/users/${userId}/posts`); const posts = await postsResponse.json(); return { ...user, posts: posts }; } catch (error) { console.error(\u0026#39;Error:\u0026#39;, error); throw error; } }; // Sử dụng getUserWithPosts(1) .then(data =\u0026gt; console.log(data)) .catch(error =\u0026gt; console.error(error)); 3. Event handling trong Class class TodoApp { constructor() { this.todos = []; this.init(); } init() { // Arrow function giữ this của class document.getElementById(\u0026#39;add-btn\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { this.addTodo(); }); document.getElementById(\u0026#39;clear-btn\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { this.clearAll(); }); } addTodo() { const input = document.getElementById(\u0026#39;todo-input\u0026#39;); if (input.value.trim()) { this.todos.push({ id: Date.now(), text: input.value, completed: false }); this.render(); input.value = \u0026#39;\u0026#39;; } } clearAll() { this.todos = []; this.render(); } render() { const list = document.getElementById(\u0026#39;todo-list\u0026#39;); list.innerHTML = this.todos .map(todo =\u0026gt; `\u0026lt;li\u0026gt;${todo.text}\u0026lt;/li\u0026gt;`) .join(\u0026#39;\u0026#39;); } } const app = new TodoApp(); Tips và Best Practices 1. Sử dụng parentheses cho rõ ràng // Có thể gây nhầm lẫn const multiply = x =\u0026gt; y =\u0026gt; x * y; // Rõ ràng hơn const multiply = (x) =\u0026gt; (y) =\u0026gt; x * y; 2. Return object cần thêm ngoặc tròn // ❌ Sai - JavaScript nghĩ {} là block code const createUser = (name, age) =\u0026gt; { name: name, age: age }; // ✅ Đúng - thêm () để return object const createUser = (name, age) =\u0026gt; ({ name: name, age: age }); // Hoặc dùng shorthand const createUser = (name, age) =\u0026gt; ({ name, age }); 3. Multiline arrow functions // Khi cần nhiều dòng, dùng {} const processData = (data) =\u0026gt; { const cleaned = data.filter(x =\u0026gt; x !== null); const transformed = cleaned.map(x =\u0026gt; x * 2); const result = transformed.reduce((sum, x) =\u0026gt; sum + x, 0); return result; }; // Hoặc chain methods const processData = (data) =\u0026gt; data .filter(x =\u0026gt; x !== null) .map(x =\u0026gt; x * 2) .reduce((sum, x) =\u0026gt; sum + x, 0); Kết luận Arrow function là một tính năng mạnh mẽ của ES6 giúp:\n✅ Code ngắn gọn hơn - giảm boilerplate code\n✅ Dễ đọc hơn - cú pháp rõ ràng, đặc biệt với callbacks\n✅ Ít bug hơn - this predictable, không bị binding issues\n✅ Hiện đại hơn - là standard của JavaScript hiện nay\nQuy tắc vàng:\nDùng arrow function cho callbacks, array methods, promises Dùng function thường cho object methods, constructors, event handlers cần this Hãy thực hành nhiều để làm quen với arrow functions - chúng sẽ giúp code của bạn clean và professional hơn!\nBài tập thực hành Hãy thử viết lại các đoạn code sau bằng arrow function:\n// 1. Tính bình phương các số const numbers = [1, 2, 3, 4, 5]; const squared = numbers.map(function(n) { return n * n; }); // 2. Lọc số lẻ const odds = numbers.filter(function(n) { return n % 2 !== 0; }); // 3. Tìm user theo ID function findUserById(users, id) { return users.find(function(user) { return user.id === id; }); } Đáp án:\n// 1. const squared = numbers.map(n =\u0026gt; n * n); // 2. const odds = numbers.filter(n =\u0026gt; n % 2 !== 0); // 3. const findUserById = (users, id) =\u0026gt; users.find(user =\u0026gt; user.id === id); Tài liệu tham khảo MDN - Arrow Functions JavaScript.info - Arrow Functions Basics ES6 Features - Arrow Functions ","permalink":"https://dungnt2911.github.io/posts/bai9/","summary":"Arrow function là cách viết hàm ngắn gọn hơn trong ES6. Tìm hiểu cú pháp, this binding và cách sử dụng hiệu quả.","title":"Arrow Functions và ES6"},{"content":"Promise xu ly cac tac vu bat dong bo trong JavaScript.\nAsync/Await giup viet code bat dong bo theo phong cach dong bo.\nTry-catch duoc su dung de bat loi trong async function.\n","permalink":"https://dungnt2911.github.io/posts/bai8/","summary":"\u003cp\u003ePromise xu ly cac tac vu bat dong bo trong JavaScript.\u003c/p\u003e\n\u003cp\u003eAsync/Await giup viet code bat dong bo theo phong cach dong bo.\u003c/p\u003e\n\u003cp\u003eTry-catch duoc su dung de bat loi trong async function.\u003c/p\u003e","title":"Async Await va Promise"},{"content":"DOM (Document Object Model) la cau truc cay cua trang web.\nJavaScript co the thay doi noi dung, thuoc tinh va CSS cua phan tu HTML.\nCac phuong thuc pho bien: getElementById, querySelector, addEventListener.\n","permalink":"https://dungnt2911.github.io/posts/bai7/","summary":"\u003cp\u003eDOM (Document Object Model) la cau truc cay cua trang web.\u003c/p\u003e\n\u003cp\u003eJavaScript co the thay doi noi dung, thuoc tinh va CSS cua phan tu HTML.\u003c/p\u003e\n\u003cp\u003eCac phuong thuc pho bien: getElementById, querySelector, addEventListener.\u003c/p\u003e","title":"DOM Manipulation"},{"content":"JavaScript la ngon ngu lap trinh phia client chay tren trinh duyet.\nCac kieu du lieu: Number, String, Boolean, Object, Array.\nJavaScript ho tro lap trinh huong doi tuong va functional programming.\n","permalink":"https://dungnt2911.github.io/posts/bai6/","summary":"\u003cp\u003eJavaScript la ngon ngu lap trinh phia client chay tren trinh duyet.\u003c/p\u003e\n\u003cp\u003eCac kieu du lieu: Number, String, Boolean, Object, Array.\u003c/p\u003e\n\u003cp\u003eJavaScript ho tro lap trinh huong doi tuong va functional programming.\u003c/p\u003e","title":"JavaScript co ban"},{"content":"Lambda expression giup viet code ngan gon va de doc hon.\nStream API cho phep xu ly du lieu theo phong cach functional programming.\nFilter, map, reduce la cac phep toan pho bien tren Stream.\n","permalink":"https://dungnt2911.github.io/posts/bai5/","summary":"\u003cp\u003eLambda expression giup viet code ngan gon va de doc hon.\u003c/p\u003e\n\u003cp\u003eStream API cho phep xu ly du lieu theo phong cach functional programming.\u003c/p\u003e\n\u003cp\u003eFilter, map, reduce la cac phep toan pho bien tren Stream.\u003c/p\u003e","title":"Lambda va Stream API"},{"content":"Exception handling giup xu ly loi trong chuong trinh mot cach an toan.\nSu dung try-catch-finally de bat va xu ly ngoai le.\nChecked Exception va Unchecked Exception la hai loai ngoai le chinh.\n","permalink":"https://dungnt2911.github.io/posts/bai4/","summary":"\u003cp\u003eException handling giup xu ly loi trong chuong trinh mot cach an toan.\u003c/p\u003e\n\u003cp\u003eSu dung try-catch-finally de bat va xu ly ngoai le.\u003c/p\u003e\n\u003cp\u003eChecked Exception va Unchecked Exception la hai loai ngoai le chinh.\u003c/p\u003e","title":"Exception Handling trong Java"},{"content":"Collections Framework cung cap cac cau truc du lieu va thuat toan de lam viec voi tap hop du lieu.\nCac interface chinh: List, Set, Map, Queue.\nArrayList, LinkedList, HashSet, HashMap la cac lop thuong dung.\n","permalink":"https://dungnt2911.github.io/posts/bai3/","summary":"\u003cp\u003eCollections Framework cung cap cac cau truc du lieu va thuat toan de lam viec voi tap hop du lieu.\u003c/p\u003e\n\u003cp\u003eCac interface chinh: List, Set, Map, Queue.\u003c/p\u003e\n\u003cp\u003eArrayList, LinkedList, HashSet, HashMap la cac lop thuong dung.\u003c/p\u003e","title":"Collections Framework trong Java"},{"content":"Java la ngon ngu lap trinh huong doi tuong.\nJava rat pho bien.\n","permalink":"https://dungnt2911.github.io/posts/bai1/","summary":"\u003cp\u003eJava la ngon ngu lap trinh huong doi tuong.\u003c/p\u003e\n\u003cp\u003eJava rat pho bien.\u003c/p\u003e","title":"Gioi thieu Java"},{"content":"## OOP la gi\nLap trinh huong doi tuong (Object-Oriented Programming) la mot phuong phap lap trinh dua tren khai niem doi tuong va lop.\n## Bon tinh chat cua OOP\n### 1. Tinh dong goi (Encapsulation)\nDong goi la che giau thong tin ben trong doi tuong va chi cho phep truy cap thong qua cac phuong thuc public.\n### 2. Tinh ke thua (Inheritance)\nKe thua cho phep mot lop con ke thua cac thuoc tinh va phuong thuc tu lop cha.\n### 3. Tinh da hinh (Polymorphism)\nDa hinh cho phep cac doi tuong khac nhau co the phan ung khac nhau voi cung mot thong diep.\n### 4. Tinh truu tuong (Abstraction)\nTruu tuong la qua trinh che giau cac chi tiet phuc tap va chi hien thi cac chuc nang can thiet.\n## Vi du ve Class va Object\nMot class la ban thiet ke, con object la the hien cu the cua class do.\n## Ket luan\nOOP giup code de quan ly, tai su dung va mo rong hon.\n","permalink":"https://dungnt2911.github.io/posts/bai2/","summary":"\u003cp\u003e## OOP la gi\u003c/p\u003e\n\u003cp\u003eLap trinh huong doi tuong (Object-Oriented Programming) la mot phuong phap lap trinh dua tren khai niem doi tuong va lop.\u003c/p\u003e\n\u003cp\u003e## Bon tinh chat cua OOP\u003c/p\u003e\n\u003cp\u003e### 1. Tinh dong goi (Encapsulation)\u003c/p\u003e\n\u003cp\u003eDong goi la che giau thong tin ben trong doi tuong va chi cho phep truy cap thong qua cac phuong thuc public.\u003c/p\u003e\n\u003cp\u003e### 2. Tinh ke thua (Inheritance)\u003c/p\u003e\n\u003cp\u003eKe thua cho phep mot lop con ke thua cac thuoc tinh va phuong thuc tu lop cha.\u003c/p\u003e","title":"Lap trinh huong doi tuong OOP trong Java"},{"content":"## Giới thiệu về tôi\nXin chào! Tôi là Nguyễn Tiến Dũng, sinh viên ngành Công nghệ thông tin chuyên ngành Công nghệ phần mềm.\n### Kỹ năng\n- **Ngôn ngữ lập trình:** Java, JavaScript\n- **Framework:** Spring Boot, React, Node.js\n- **Công cụ:** Git, GitHub, VS Code\n- **Cơ sở dữ liệu:** MySQL, MongoDB\n### Sở thích\n- Học hỏi công nghệ mới\n- Viết blog chia sẻ kiến thức\n- Giải quyết các bài toán lập trình\n### Liên hệ\n- **Email:** tiendungcutemetri@gmail.com\n- **GitHub:** github.com/dungnt2911\n*Blog này được tạo ra để chia sẻ kiến thức về Java và JavaScript trong quá trình học tập.*\n","permalink":"https://dungnt2911.github.io/profile/","summary":"\u003cp\u003e## Giới thiệu về tôi\u003c/p\u003e\n\u003cp\u003eXin chào! Tôi là Nguyễn Tiến Dũng, sinh viên ngành Công nghệ thông tin chuyên ngành Công nghệ phần mềm.\u003c/p\u003e\n\u003cp\u003e### Kỹ năng\u003c/p\u003e\n\u003cp\u003e- **Ngôn ngữ lập trình:** Java, JavaScript\u003c/p\u003e\n\u003cp\u003e- **Framework:** Spring Boot, React, Node.js\u003c/p\u003e\n\u003cp\u003e- **Công cụ:** Git, GitHub, VS Code\u003c/p\u003e\n\u003cp\u003e- **Cơ sở dữ liệu:** MySQL, MongoDB\u003c/p\u003e\n\u003cp\u003e### Sở thích\u003c/p\u003e\n\u003cp\u003e- Học hỏi công nghệ mới\u003c/p\u003e\n\u003cp\u003e- Viết blog chia sẻ kiến thức\u003c/p\u003e","title":"Profile"}]